*longline.txt*  Avoid Long Lines.               *longline*

Author:  Nate Soares <http://so8r.es/>
License: Same terms as Vim itself (see |license|)

=============================================================================
CONTENTS                                        *longline-contents*
	    1. Introduction................................|longline-intro|
	    2. Configuration...............................|longline-config|
	    3. Commands....................................|longline-commands|
	    4. Extras......................................|longline-extras|
	    5. About.......................................|longline-about|

=============================================================================
INTRODUCTION                                    *longline-intro*

Longline allows you to:

- Specify by filetype how long is too long
- Automatically set |textwidth| correctly
- Highlight lines that are too long
- Place a long line warning in your statusline

=============================================================================
CONFIGURATION                                   *longline-config*

						*g:loaded_longline*
use this to disable the plugin completely: >
        let g:loaded_longline = 1
<

						*g:longline_autohl*
Whether or not to automatically highlight the ends of lines that are too long.
Default: 0.

						*g:longline_autotw*
Whether or not to automatically set |textwrap|. Default: 1.

						*g:longline_maxlength*
The maximum line length. Default: 80. '0' denotes no limit.

						*g:longline_exceptions*
Set exceptions for filetypes that don't conform to |g:longline_maxlength|. For
example, the following: >
	let g:longline_exceptions={'java': 100, 'markdown': 0}
<
Allows java lines to be 100 characters before warnings are issued, and turns
long line warnings off for markdown. Setting '0' means that no line is too
long. Setting a negative number means that the default should be used.

This dict will be merged with g:longline_default_exceptions, which is: >
	let g:longline_default_exceptions={'text'; 0, 'html': 0, 'help': 78}
<
If you don't agree with those defaults, either override them in
|g:longline_exceptions| or clear the default exceptions: >
	let g:longline_default_exceptions={}
<

						*g:longline_tw*
A dictionary denoting which filetypes should have |textwrap| on. By default
all filetypes will have |textwrap| set, but any filetype with a zero or
negative value in this dict will not have textwrap set. For example: >
	let g:longline_tw={'markdown': 0}
<
ensures that |textwrap| will never be set by longline in markdown files.


=============================================================================
COMMANDS                                        *longline-commands*

						*:LongLineNext*
Jumps the cursor to the next line that is too long.

						*:LongLinePrev*
Jumps the cursor to the previous line that is too long.

						*:LongLineShow*
Highlights the parts of lines in a file that are too long.

						*:LongLineHide*
Turns off long line highlighting.

						*:LongLineToggle*
Toggles long line highlighting.

=============================================================================
EXTRAS                                          *longline-extras*

Status Line                                     *longline-statusline*
						*longline#Exists()*
Longline does not change your status line, but it does provide hooks for you
to add a long line warning to your status line yourself.  The function
'longline#Exists()' returns non-zero if a long line exists in the file. We
recommend adding >

        set statusline+=%#WarningMsg#
        set statusline+=%{longline#Exists()?'[â€¦]':''}
        set statusline+=%*
<
or something of the sort to your statusline.

						*longline#MaxLength*
Your scripts may call this function to determine the longest allowable line
for a filetype. You may pass a filetype as an argument. If you don't, the
current filetype will be used.

=============================================================================
MAPPINGS                                        *longline-mappings*

Longline does not change your mappings. However, we recommend that you
either turn on highlighting for all files: >
	let longline#autohl = 1
<
or creating a mapping to toggle long line highlighting: >
	" Mnemonic: longline
	noremap <leader>ll :LongLineToggle<CR>
	noremap <leader>ln :LongLineNext<CR>
	noremap <leader>lp :LongLinePrev<CR>
<

=============================================================================
ABOUT                                           *longline-about*

Grab the latest version or report a bug on GitHub:

http://github.com/Soares/longline.vim

 vim:tw=78:ts=8:sw=0:sts=8:noet:ft=help:norl:
