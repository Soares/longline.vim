*longline.txt*  Avoid Long Lines.			*longline*

Author:  Nate Soares <http://so8r.es/>
License: Same terms as Vim itself (see |license|)

=============================================================================
CONTENTS					*longline-contents*
	    1. Introduction..............................|longline-intro|
	    2. Configuration.............................|longline-config|
	    3. Commands..................................|longline-commands|
	    4. Status line...............................|longline-statusline|
	    5. Functions.................................|longline-functions|
	    6. Mappings..................................|longline-mappings|
	    7. About.....................................|longline-about|

=============================================================================
INTRODUCTION					*longline-intro*

Longline allows you to:

* Specify by filetype how long is too long
* Automatically set |textwidth| correctly
* Highlight lines that are too long
* Place a long line warning in your statusline

=============================================================================
CONFIGURATION					*longline-config*

						*g:loaded_longline*
use this to disable the plugin completely: >
	let g:loaded_longline = 1
<

						*g:longline_autohl*
Whether or not to automatically highlight the ends of lines that are too long.
Disabled by default.

						*g:longline_autotw*
Whether or not to automatically set |textwrap|. Enabled by default.

						*g:longline_maxlength*
The maximum line length. Default: 80. '0' denotes no limit.

						*g:longline_exceptions*
Set exceptions for filetypes that don't conform to |g:longline_maxlength|. For
example, the following allows java to be 100 characters long and turns
warnings off for markdown files: >
	let g:longline_exceptions={'java': 100, 'markdown': 0}
<
A zero value means that no line is too long. A negative value means that the
default should be used.

This dict will be merged with |g:longline_default_exceptions|.

					*g:longline_default_exceptions*
The default longline exceptions: >
	{'text': 0, 'html': 0, 'help': 78}
< You should generally change |g:longline_exceptions| instead.

						*g:longline_noautotw*
A list of filetypes which should never be affected by longline's
auto-textwrapping.

						*g:longline_automap*
Makes the default key bindings. See |longline-mappings|. Disabled by default.


=============================================================================
COMMANDS					*longline-commands*

:LongLineNext					*:LongLineNext*
	Jumps the cursor to the next line that is too long.

:LongLinePrev					*:LongLinePrev*
Jumps the cursor to the previous line that is too long.

:LongLineShow					*:LongLineShow*
Highlights the parts of lines in a file that are too long.

:LongLineHide					*:LongLineHide*
Turns off long line highlighting.

:LongLineToggle					*:LongLineToggle*
Toggles long line highlighting.

=============================================================================
STATUSLINE					*longline-statusline*

Longline does not change your status line, but it does provide hooks for you
to add longline warnings to your status line manually.

You are encouraged to write your own statusline function using
|longline#exists()| if you prefer different formatting.

longline#status#flag()				*longline#status#flag()*
	An alias for |longline#status#warning()|. If any other statusline
	states are added, longline#status#flag() will return the first
	non-empty flag in decreasing order of severity.

longline#status#warning()			*longline#status#warning()*
	[…]	if the file has lines that are too long.
	Used as follows:
>
		set statusline+=%#WarningMsg#
		set statusline+=%{longline#status#warning()}
		set statusline+=%*
<

=============================================================================
FUNCTIONS					*longline-extras*

						*longline#exists()*
This function returns true if a long line exists in the file. It can be used
in various scripts or to make your own flavor of statusline flag. For example,
to emulate |longline#statusline()|, do >
	set statusline+=%#WarningMsg#
	set statusline+=%{longline#exists()?'[…]':''}
	set statusline+=%*
<

						*longline#maxlength*
Your scripts may call this function to determine the longest allowable line
for a filetype. You may pass a filetype as an argument. If you don't, the
current filetype will be used.

=============================================================================
MAPPINGS					*longline-mappings*

Longline does not change your mappings. However, we recommend that you
either turn on highlighting for all files: >
	let longline#autohl = 1
<
or creating a mapping to toggle long line highlighting: >
	" Mnemonic: longline
	noremap <leader>ll :LongLineToggle<CR>
	noremap <leader>ln :LongLineNext<CR>
	noremap <leader>lp :LongLinePrev<CR>
<
If you like these mappings you can turn them on with |g:longline_automap|.
You're encouraged to customize your mappings to your own taste.

=============================================================================
ABOUT						*longline-about*

Grab the latest version or report a bug on GitHub:

http://github.com/Soares/longline.vim

 vim:tw=78:ts=8:sw=0:sts=8:noet:ft=help:norl:
